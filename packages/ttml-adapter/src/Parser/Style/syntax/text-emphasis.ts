import { createStyleNode } from "./StyleNode.js";
import * as Kleene from "../../structure/kleene.js";
import { Color } from "./color.js";

/**
 * @syntax \<quoted-string>
 *   : double-quoted-string
 *   | single-quoted-string
 *
 * double-quoted-string
 *   : '"' ([^"\\] | escape)* '"'
 *
 * single-quoted-string
 *   : "'" ([^'\\] | escape)* "'"
 *
 * escape
 *   : '\\' char
 */
const QuotedString = createStyleNode("quoted-string", "quoted-string", () => [
	Kleene.or(
		//
		createStyleNode("double-quoted-string", "double-quoted-string"),
		createStyleNode("single-quoted-string", "single-quoted-string"),
	),
]);

/**
 * @syntax \<emphasis-style>
 * 		| "none"
 * 		| "auto"
 * 		| ( "filled" | "open" ) || ( "circle" | "dot" | "sesame" )
 * 		| \<quoted-string>
 *
 * @see https://w3c.github.io/ttml2/#style-value-emphasis
 *
 * The semantics of text emphasis style values are defined as follows:
 *
 * "none" - No text emphasis mark.
 * "auto" - If a vertical writing mode applies, then equivalent to `filled
 * 					sesame`; otherwise, equivalent to `filled circle`.
 *
 * "filled" - Emphasis mark is filled with emphasis color.
 * "open" - Emphasis mark is not filled, i.e., its outline is stroked with
 * 					the emphasis color, but it is not filled.
 *
 * "circle" - Emphasis mark is a circle. If `filled`, then equivalent to U+25CF '●';
 * if open, then equivalent to U+25CB '○'
 *
 * "dot" - Emphasis mark is a dot. If `filled`, then equivalent to U+2022 '•';
 * 					if `open`, then equivalent to U+25E6 '◦'
 *
 * "sesame" - Emphasis mark is a sesame. If `filled`, then equivalent to U+FE45 '﹅';
 * 						if `open`, then equivalent to U+FE46 '﹆'
 *
 * `<quoted-string>` - Emphasis mark is the first grapheme cluster of string, with
 * 										remainder of string ignored.
 *
 * If only `filled` or `open` is specified, then it is equivalent to `filled circle`
 * and `open circle`, respectively.
 *
 * If only `circle`, `dot`, or `sesame` is specified, then it is equivalent to
 * `filled circle`, `filled dot`, and `filled sesame`, respectively.
 *
 * If an implementation does not recognize or otherwise distinguish an emphasis style
 * value, then it must be interpreted as if a style of auto were specified;
 * as such, an implementation that supports text emphasis marks must minimally support
 * the auto value.
 */

const EmphasisStyle = createStyleNode("emphasis-style", "emphasis-style", () => [
	Kleene.or(
		//	"none"	| "auto"
		createStyleNode("none", "none"),
		createStyleNode("auto", "auto"),
		//	( "filled" | "open" ) || ( "circle" | "dot" | "sesame" )
		Kleene.ordered(
			//
			Kleene.zeroOrOne(
				Kleene.or(
					//
					createStyleNode("filled", "style"),
					createStyleNode("open", "style"),
				),
			),
			Kleene.zeroOrOne(
				Kleene.or(
					createStyleNode("circle", "shape"),
					createStyleNode("dot", "shape"),
					createStyleNode("sesame", "shape"),
				),
			),
		),
		//	<quoted-string>
		QuotedString,
	),
]);

/**
 * @syntax \<emphasis-color> : \<annotation-color>
 * @see https://w3c.github.io/ttml2/#style-value-emphasis-color
 *
 * @syntax "current" | \<color>
 * @see https://w3c.github.io/ttml2/#style-value-annotation-color
 */
const AnnotationColor = createStyleNode("annotation-color", "annotation-color", () => [
	Kleene.or(
		//
		createStyleNode("current", "current"),
		Color,
	),
]);

/**
 * @syntax \<emphasis-position> : \<annotation-position>
 * @see https://w3c.github.io/ttml2/#style-value-emphasis-position
 *
 * @syntax "before" | "after" | "outside"
 * @see https://w3c.github.io/ttml2/#style-value-annotation-position
 *
 * **before**
 *
 * 		Towards the before edge of the affected glyph areas.
 * 		If a horizontal writing mode applies, then this is towards the top of the glyph areas.
 * 		If a vertical writing mode applies, then this is either towards the right or left of
 * 		the glyph areas, according to whether `tts:writingMode` resolves to tbrl or tblr, respectively.
 *
 * **after**
 *
 * 		Towards the after edge of the affected glyph areas.
 * 		If a horizontal writing mode applies, then this is towards the bottom of the glyph areas.
 * 		If a vertical writing mode applies, then this is either towards the left or right of
 * 		the glyph areas, according to whether `tts:writingMode` resolves to tbrl or tblr, respectively.
 *
 * **outside**
 *
 * 		Equivalent to `before` for (1) the only line area of or (2) the first line area of the last
 * 		block area generated by a `p` element which contains annotated text;
 * 		otherwise, equivalent to after.
 *
 * If an implementation does not recognize or otherwise distinguish an annotation position value,
 * then it must be interpreted as if a position of `before` were specified; as such, an implementation
 * that supports text annotation marks must minimally support the before value.
 */

const AnnotationPosition = createStyleNode("annotation-position", "annotation-position", () => [
	Kleene.or(
		//
		createStyleNode("before", "annotation-position"),
		createStyleNode("after", "annotation-position"),
		createStyleNode("outside", "annotation-position"),
	),
]);

/**
 * @syntax \<emphasis-style> || \<emphasis-color> || \<emphasis-position>
 * @see https://w3c.github.io/ttml2/#style-value-text-emphasis
 */
export const TextEmphasis = createStyleNode("text-emphasis", "text-emphasis", () => [
	Kleene.or(EmphasisStyle, AnnotationColor, AnnotationPosition),
]);
